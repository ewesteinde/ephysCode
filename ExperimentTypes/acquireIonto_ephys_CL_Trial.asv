function [rawData, trialData, trialMeta, behaviorData, foldername] = acquireIonto_ephys_CL_Trial(trialRepeats, stimLength, bufferLength)
% Aquires a trial of current clamp data obtained, with the extension command 
% on, and then use this response to calculate the input resistance. The 
% obtained trace and calculated input resistance are then saved

% INPUT
    % amp, pulse amplitude
    %pulseLength stimulus duration
    %bufferLength time before and after stim before next trial
 
% OUTPUT
    % inputData - obtained trace
    % inputResistance - calculated input resistance
%% Initialize Settings

daqreset;
ephysSettings;
DAQSettings_fictrac;
% Prepare analog output channel
aO = niIO.addAnalogOutputChannel(devID,'ao0', 'Voltage');
aO.Name = 'External command';

%% ACQUIRE TRIAL, SAVE EXPERIMENTAL PARAMETERS

% close fictrac if it's already running
closed = 0; 
while closed == 0
    try 
        [~, cmdOut] = system('tasklist | findstr /i "fictrac.exe"');
        cmdOut = strsplit(cmdOut);
        pid = cmdOut{2};
        system(['"C:\Code\windows-kill_x64_1.1.4_lib_release\windows-kill.exe" -SIGINT ', pid])
    catch
        disp('fictrac CL is closed')
        closed = 1; 
    end 
end

Panel_com('stop')

% Start FicTrac in background from current experiment directory (config file must be in directory)
config = 'C:\Code\FicTrac\sample\config_current.txt'; 
foldername = 'C:\Users\ewest\OneDrive\Documents\tempFictracData'; 
mkdir(foldername);
configNew = fullfile(foldername,"config.txt");
copyfile(config, configNew);

expDir = foldername;
FT_PATH = 'C:\Code\FicTrac\bin\Release\fictrac.exe';
cmdStr = ['cd "', expDir, '" & start "" "',  FT_PATH, ...
        '" config.txt & exit'];
system(cmdStr);

%Panels Code
start = 1;
closedLoop_yFunc(settings.panels.barPattern, settings.panels.CL_OL_Function, start);
Panel_com('start');

% Call socket_client_CL_OL to open socket connection from fictrac to Phiget22 device
Socket_PATH = 'C:\Code\FicTrac\scripts';
SOCKET_SCRIPT_NAME = 'socket_client_CL_OL.py';
cmdstring = ['cd "' Socket_PATH '" & python ' SOCKET_SCRIPT_NAME ' &'];
[status] = system(cmdstring, '-echo');
    
       
% Start Data Acquisition

trialData = cell(1,trialRepeats);
stimLength = stimLength/1000; 
% Set analog output command
IontoStim = [zeros(round(bufferLength*niIO.Rate),1); ones(round(stimLength*niIO.Rate),1); zeros(round(bufferLength*niIO.Rate),1)]; % initialize
IontoStim = IontoStim * 5; % convert stim protocol to V
%niIO.DurationInSeconds = length(IontoStim)/niIO.Rate;  % Trial length in sec.

output = zeros(size(IontoStim,1),1); % initialize
output(:,1) = IontoStim;
trialMeta.trialAveBaseline = zeros(1,trialRepeats);
trialMeta.trialAveResp = zeros(1,trialRepeats);

for t = 1:trialRepeats
    if trialRepeats>1
        fprintf(['\n************** Acquiring Trial ', num2str(t),' *************\n'])
    end

    niIO.queueOutputData(output);

    % begin trial
    [rawData, trialTime] = niIO.startForeground;

    [trialMeta.gain, trialMeta.mode, trialMeta.freq]= decodeTelegraphedOutput(rawData);

    trialData{t}.time = trialTime;

    % Process non-scaled data, change rawData channels based on your setup
    trialData{t}.current = settings.current.softGain .* rawData(:,settings.raw.current); % pA
    trialData{t}.voltage = settings.voltage.softGain .* rawData(:,settings.raw.voltage); % mV

    trialData{t}.input = output(:,1)/5;

        switch trialMeta.mode
            % Voltage Clamp
            case {'Track','V-Clamp'}
                settings.scaledOutput.softGain = 1000 / (trialMeta.gain * settings.current.betaFront);
                trialData{t}.scaledOutput = settings.scaledOutput.softGain .* adjustOffsetBasedGain(rawData(:,settings.raw.scaledOutput), trialMeta.gain);  %pA
                trialMeta.trialAveBaseline(t) = sum(trialData{t}.scaledOutput(1:bufferLength*niIO.Rate))/length(trialData{t}.scaledOutput(1:bufferLength*niIO.Rate));
                trialMeta.trialResp(t) = -(max(abs(trialData{t}.scaledOutput(bufferLength*niIO.Rate:(bufferLength+.2)*niIO.Rate)))-abs(trialMeta.trialAveBaseline(t)));
            
                % Plot vclamp trial
                figure(11); clf;
                h(1) = subplot(5,1,1:3);
                plot(trialData{t}.time, trialData{t}.current, 'k')
                ylabel('Current (pA)')

                h(2) = subplot(5,1,4);
                plot(trialData{t}.time, trialData{t}.voltage, 'k')
                ylabel('Voltage (mV)')

                h(3) = subplot(5,1,5);
                plot(trialData{t}.time, trialData{t}.input,'k')
                ylabel('Ionto Stim')
                xlabel('Time (s)')
                
                linkaxes(h,'x')
                
                figure(22  ); clf;
                y = trialMeta.trialAveBaseline(1:t);
                yyaxis left
                plot(1:t,y,'-.')
                ylabel('Baseline (mV)')

                z = trialMeta.trialResp(1:t);
                yyaxis right
                plot(1:t,z,'-.')
                ylim([min(trialMeta.trialResp(1:t))-2 0])
                ylabel('Response (mV)')
                xlabel('Trial')

            % Current Clamp
            case {'I=0','I-Clamp Normal','I-Clamp Fast'}
                settings.scaledOutput.softGain = 1000 / (trialMeta.gain);
                trialData{t}.scaledOutput = settings.scaledOutput.softGain .* adjustOffsetBasedGain(rawData(:,settings.raw.scaledOutput), trialMeta.gain);  %pA  %pA
                trialMeta.trialAveBaseline(t) = sum(trialData{t}.scaledOutput(1:bufferLength*niIO.Rate))/length(trialData{t}.scaledOutput(1:bufferLength*niIO.Rate));
                trialMeta.trialResp(t) = -(max(abs(trialData{t}.scaledOutput(bufferLength*niIO.Rate:(bufferLength+.2)*niIO.Rate)))-abs(trialMeta.trialAveBaseline(t)));
                % Plot iclamp trial
                figure(11); clf;
                h(1) = subplot(5,1,1);
                plot(trialData{t}.time, trialData{t}.current, 'k');
                ylabel('Current (pA)')

                h(2) = subplot(5,1,2:4);
                plot(trialData{t}.time, trialData{t}.scaledOutput, 'k');
                ylabel('Voltage (mV)')

                h(3) = subplot(5,1,5);
                plot(trialData{t}.time, trialData{t}.input,'k');
                ylabel('Ionto Stim')
                xlabel('Time (s)')

                sgtitle(['Trial ' num2str(t)])
              
                linkaxes(h,'x')
                
                figure(22); clf; 
                y = trialMeta.trialAveBaseline(1:t);
                yyaxis left
                plot(1:t,y,'-.')
                hold on
                plot(1:t, movmean(trialMeta.trialAveBaseline(1:t),7),'k-');
                ylabel('Baseline (mV)')

                z = trialMeta.trialResp(1:t);
                
                yyaxis right
                plot(1:t,z,'-.')
                ylim([min(trialMeta.trialResp(1:t))-2 0])
                hold on
                plot(1:t, movmean(trialMeta.trialResp(1:t),7),'r-');
                ylabel('Response (mV)')
                xlabel('Trial')
        end
        
    % Process behavior data
    [disp_for, disp_side, disp_yaw, frX, frY, angle, vel_for, vel_side, vel_yaw] = process_data(rawData, settings.panels.barPattern);
    behaviorData{t}.disp_for = disp_for;
    behaviorData{t}.disp_side = disp_side;
    behaviorData{t}.disp_yaw = disp_yaw;
    behaviorData{t}.frX = frX;
    behaviorData{t}.frY = frY;
    behaviorData{t}.angle = angle;
    behaviorData{t}.vel_for = vel_for;
    behaviorData{t}.vel_side = vel_side;
    behaviorData{t}.vel_yaw = vel_yaw;        
end




trialMeta.trialDuration_s = length(trialTime)/niIO.Rate; 
trialMeta.stimLength_ms = stimLength;
trialMeta.trials      =  trialRepeats;
trialMeta.daqRate     =  niIO.Rate;
trialMeta.daqChIDs    = {niIO.Channels(:).ID};
trialMeta.daqChNames  = {niIO.Channels(:).Name};

fprintf('\n******** acquireIontoStim_ephysTrial Complete *********\n' )